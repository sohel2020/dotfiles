#!/usr/bin/env bash
# Description: Raycast Configuration Encrypt/Decrypt Script
# Handles both encryption and decryption of Raycast .rayconfig files
set -Eeuo pipefail

if [[ -f "$DOTFILES/bin/lib/common.sh" ]]; then
  source "$DOTFILES/bin/lib/common.sh"
else
  echo "Error: Unable to source common.sh"
  exit 1
fi

PASSWORD="12345678"

show_help() {
    echo "Usage: $0 [encrypt|decrypt] [file]"
    echo ""
    echo "Commands:"
    echo "  encrypt        - Encrypt default JSON file (~/.config/raycast/raycast.json) to .rayconfig format"
    echo "  decrypt <file> - Decrypt .rayconfig file to JSON format"
    echo ""
    echo "Examples:"
    echo "  $0 encrypt"
    echo "  $0 decrypt raycast.rayconfig"
    echo ""
    echo "File Requirements:"
    echo "  - For encryption: Uses ~/.config/raycast/raycast.json (must exist and be valid JSON)"
    echo "  - For decryption: Input file must be a valid .rayconfig file"
    echo "  - Files must exist and be readable"
}

CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

check_file_exists() {
    local file="$1"
    local operation="$2"
    
    # Expand tilde if present
    file="${file/#\~/$HOME}"
    
    if [ ! -f "$file" ]; then
        log_error "Input file '$file' not found."
        log_info "Please ensure the file exists and try again."
        exit 1
    fi
    
    if [ ! -r "$file" ]; then
        log_error "Input file '$file' is not readable."
        log_info "Please check file permissions and try again."
        exit 1
    fi
    
    # Additional validation based on operation
    case "$operation" in
        "encrypt")
            if [[ "$file" != *.json ]]; then
                log_warning "Input file '$file' doesn't have .json extension."
                log_info "Proceeding anyway, but ensure it contains valid JSON data."
            fi
            ;;
        "decrypt")
            if [[ "$file" != *.rayconfig ]]; then
                log_warning "Input file '$file' doesn't have .rayconfig extension."
                log_info "Proceeding anyway, but ensure it's a valid encrypted rayconfig file."
            fi
            ;;
    esac
    
    echo "$file"  # Return the expanded file path
}

encrypt_file() {
    local input_file="${CONFIG_HOME}/raycast/raycast.json"
    local output_file="${CONFIG_HOME}/raycast/raycast.rayconfig"

    # Check if input file exists and is readable
    input_file=$(check_file_exists "$input_file" "encrypt")

    # Validate JSON format if jq is available
    if command -v jq >/dev/null 2>&1; then
        if ! jq empty "$input_file" 2>/dev/null; then
            log_error "Input file '$input_file' does not contain valid JSON."
            exit 1
        fi
        log_info "JSON validation passed"
    else
        log_warning "jq not found - skipping JSON validation"
    fi

    # Create a temporary file for the intermediate step
    local temp_file=$(mktemp)

    log_info "Starting encryption process..."
    
    # Step 1: Add 16-byte header and gzip the JSON file
    printf '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' > "$temp_file"
    gzip -c "$input_file" >> "$temp_file"

    # Step 2: Encrypt with AES-256-CBC
    if openssl enc -aes-256-cbc -nosalt -in "$temp_file" -k "$PASSWORD" -out "$output_file"; then
        log_success "Successfully encrypted '$input_file' to '$output_file'"
        log_info "Output file size: $(wc -c < "$output_file") bytes"
    else
        log_error "Encryption failed"
        rm -f "$temp_file" "$output_file"
        exit 1
    fi

    # Clean up temporary file
    rm "$temp_file"
}

decrypt_file() {
    local input_file="$1"
    local output_file="${CONFIG_HOME}/raycast/raycast.json"
    
    # Check if input file exists and is readable
    input_file=$(check_file_exists "$input_file" "decrypt")
    
    # Expand tilde in output path
    output_file="${output_file/#\~/$HOME}"

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$output_file")"
    
    log_info "Starting decryption process..."

    # Decrypt the file
    if openssl enc -d -aes-256-cbc -nosalt -in "$input_file" -k "$PASSWORD" 2>/dev/null | tail -c +17 | gunzip > "$output_file"; then
        # Verify the decrypted file is valid JSON if jq is available
        if command -v jq >/dev/null 2>&1; then
            if jq empty "$output_file" 2>/dev/null; then
                log_success "Successfully decrypted '$input_file' to '$output_file'"
                log_info "Output file size: $(wc -c < "$output_file") bytes"
                log_info "JSON validation passed"
            else
                log_error "Decrypted file is not valid JSON. Decryption may have failed."
                rm -f "$output_file"
                exit 1
            fi
        else
            log_success "Successfully decrypted '$input_file' to '$output_file'"
            log_info "Output file size: $(wc -c < "$output_file") bytes"
            log_warning "jq not found - skipping JSON validation"
        fi
    else
        log_error "Decryption failed. Check password or file format."
        rm -f "$output_file"  # Remove empty/failed output file
        exit 1
    fi
}

# Main script logic
if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

case "$1" in
    "encrypt")
        encrypt_file
        ;;
    "decrypt")
        if [ $# -lt 2 ]; then
            log_error "No input file specified for decryption."
            echo ""
            show_help
            exit 1
        fi
        decrypt_file "$2"
        ;;
    "-h"|"--help"|"help")
        show_help
        ;;
    *)
        log_error "Unknown command '$1'"
        echo ""
        show_help
        exit 1
        ;;
esac
